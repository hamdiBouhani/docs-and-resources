name: main
on: [pull_request]
jobs:
  lint_yaml_files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install yamlfmt
        run: |
          cd "$(mktemp -d)"
          curl --location --silent https://github.com/google/yamlfmt/releases/download/v0.5.0/yamlfmt_0.5.0_Linux_x86_64.tar.gz | tar zxvf -
          mv yamlfmt /usr/local/bin
      # Perform a dry run; show the output of a formatting operation without performing it.
      - run: yamlfmt -dry
      - run: yamlfmt -lint
  lint_tf_files:
    strategy:
      matrix:
        modules: [cloudamqp, cloud-storage, core-database, gke-cluster, k8s-manifest, redis, secrets-management]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout source code
      - uses: actions/cache@v3
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: v1-tflint-${{ hashFiles('.tflint.hcl') }}
      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          tflint_version: v0.45.0
      - name: Show version
        run: tflint --version
      - name: Show help
        run: tflint --help
      - name: Lint
        working-directory: ./terraform/${{ matrix.modules }}
        run: |
          tflint --init
          TFLINT_LOG=debug tflint --minimum-failure-severity=error
      - name: Lint v2
        run: |
          cd terraform/${{ matrix.modules }}
          tflint --init
          TFLINT_LOG=debug tflint --minimum-failure-severity=error
  validate_and_Plan:
    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"
    strategy:
      matrix:
        modules: [cloudamqp, cloud-storage, core-database, gke-cluster, k8s-manifest, redis, secrets-management]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout source code
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-dealroom-core-infra-pool/providers/github-provider"
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      - name: log
        run: cat ${{steps.auth.outputs.credentials_file_path}}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: set crdential_file
        run: gcloud auth login --cred-file=${{steps.auth.outputs.credentials_file_path}} --activate --quiet
      - name: Run gcloud config list
        run: gcloud config list
      # Runs a set of commands using the runners shell
      - name: Run a test
        run: |
          gcloud components list
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt update
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
          echo "##vso[task.setvariable variable=USE_GKE_GCLOUD_AUTH_PLUGIN]True"
          gcloud components list
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.ZONE }}
      - uses: hashicorp/setup-terraform@v2
      - name: terraform validate
        working-directory: terraform/${{ matrix.modules }}
        run: |
          terraform init
          terraform workspace select development
          terraform workspace list
          terraform validate
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: terraform/${{ matrix.modules }}
        id: plan
        run: terraform plan -lock=false
        env:
          TF_LOG: TRACE
